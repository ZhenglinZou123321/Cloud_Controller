3.13版本收到了sumo的tcp阻塞的影响，无法正常实现分布式仿真。
于是，3.17版本准备做仿真场景上的修改。
也就是，每一个step，都把我们需要的所有数据一口气提炼出来。这样，无非是一次的数据量大一点罢了，但是不会出现
tcp通信争抢的情况了。

需要哪些数据呢？
车辆：
车辆速度
车辆位置
车辆所在车道id
车辆前车id

路口：
每一个lane上的车辆数

智能网联信号灯：
当前的各个相位以及剩余时长



计划采用redis数据库服务器来进行存储

感觉使用redis的必要性不大，有点刻意增加工作量的感觉。 
还是直接存到python的变量里吧


发现了一个问题，我的路口线程和信号灯线程都是仅智能网联信号灯路口
那对于普通的路口我咋处理呢？ 其实在我这个地图里，普通路口都不是交叉口

还有一个问题，现在traci.vehicle.getposition是在主线程里update。
那么车辆线程还需要使用这个函数来判断车辆是否在场景内吗
还是说从别的角度来解决这个问题？

traffic_light中的
def get_lane_state(lane_id,lane_dict,lane_m):
有很大的问题，写的很冗余，貌似没必要搞这么复杂。他只是想得到lane当前的phase和剩余时长
只不过他的phase是0，1，2来表示的


发现，交通路口状态那里，density_from在下面状态列表extend的时候没有修改，仍然是density_to。这意味着
训练的模型也是错误的。
因此，需要重新训练模型！



25.4.1
由于类对象的序列化之前需要进行__dict__,因此，他就相当于变成了一个字典。
比如说以前的调用方法是A.name 现在就变成了A["name"]
但由于我们只需要对象里的参数，并不需要去更新它。因此，我们要给对象一个函数，去把从数据库里拿到的数据同步到本地参数集合中
